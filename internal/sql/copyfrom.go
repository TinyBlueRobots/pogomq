// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: copyfrom.go

package sql

import (
	"context"
)

// iteratorForEnqueueMessages implements pgx.CopyFromSource.
type iteratorForEnqueueMessages struct {
	rows                 []EnqueueMessagesParams
	skippedFirstNextCall bool
}

func (r *iteratorForEnqueueMessages) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForEnqueueMessages) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].AutoComplete,
		r.rows[0].Body,
		r.rows[0].ID,
		r.rows[0].MaxDeliveryCount,
		r.rows[0].Scheduled,
		r.rows[0].Topic,
		r.rows[0].Ttl,
		r.rows[0].TtlSeconds,
	}, nil
}

func (r iteratorForEnqueueMessages) Err() error {
	return nil
}

func (q *Queries) EnqueueMessages(ctx context.Context, arg []EnqueueMessagesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"pogomq"}, []string{"auto_complete", "body", "id", "max_delivery_count", "scheduled", "topic", "ttl", "ttl_seconds"}, &iteratorForEnqueueMessages{rows: arg})
}
